Ok, this file is compiled with x64 aseembly, but if we disassemble the main functions, things looks pretty interesting.

First use gdb:

$ gdb ./easyone

Then the thing loads, and then do:

(gdb) disass main
Dump of assembler code for function main:
   0x00000000004005ed <+0>:	push   %rbp
   0x00000000004005ee <+1>:	mov    %rsp,%rbp
   0x00000000004005f1 <+4>:	sub    $0x50,%rsp
   0x00000000004005f5 <+8>:	lea    -0x30(%rbp),%rax
   0x00000000004005f9 <+12>:	mov    %rax,-0x8(%rbp)
   0x00000000004005fd <+16>:	lea    -0x50(%rbp),%rax
   0x0000000000400601 <+20>:	mov    %rax,-0x10(%rbp)
   0x0000000000400605 <+24>:	mov    $0x400794,%edi
   0x000000000040060a <+29>:	mov    $0x0,%eax
   0x000000000040060f <+34>:	callq  0x4004c0 <printf@plt>
   0x0000000000400614 <+39>:	lea    -0x50(%rbp),%rax
   0x0000000000400618 <+43>:	mov    %rax,%rsi
   0x000000000040061b <+46>:	mov    $0x40079f,%edi
   0x0000000000400620 <+51>:	mov    $0x0,%eax
   0x0000000000400625 <+56>:	callq  0x4004f0 <__isoc99_scanf@plt>
   0x000000000040062a <+61>:	movb   $0x37,-0x2a(%rbp)
   0x000000000040062e <+65>:	movb   $0x33,-0x1e(%rbp)
   0x0000000000400632 <+69>:	movb   $0x31,-0x25(%rbp)
   0x0000000000400636 <+73>:	movb   $0x48,-0x29(%rbp)
   0x000000000040063a <+77>:	movb   $0x37,-0x22(%rbp)
   0x000000000040063e <+81>:	movb   $0x4f,-0x18(%rbp)
   0x0000000000400642 <+85>:	movb   $0x35,-0x1c(%rbp)
   0x0000000000400646 <+89>:	movb   $0x35,-0x27(%rbp)
   0x000000000040064a <+93>:	movb   $0x4f,-0x20(%rbp)
   0x000000000040064e <+97>:	movb   $0x5f,-0x1a(%rbp)
   0x0000000000400652 <+101>:	movb   $0x79,-0x1b(%rbp)
   0x0000000000400656 <+105>:	movb   $0x33,-0x14(%rbp)
   0x000000000040065a <+109>:	movb   $0x43,-0x2e(%rbp)
   0x000000000040065e <+113>:	movb   $0x52,-0x17(%rbp)
   0x0000000000400662 <+117>:	movb   $0x31,-0x28(%rbp)
   0x0000000000400666 <+121>:	movb   $0x54,-0x2d(%rbp)
   0x000000000040066a <+125>:	movb   $0x35,-0x24(%rbp)
   0x000000000040066e <+129>:	movb   $0x46,-0x19(%rbp)
   0x0000000000400672 <+133>:	movb   $0x41,-0x30(%rbp)
   0x0000000000400676 <+137>:	movb   $0x5f,-0x16(%rbp)
   0x000000000040067a <+141>:	movb   $0x4d,-0x15(%rbp)
   0x000000000040067e <+145>:	movb   $0x5f,-0x23(%rbp)
   0x0000000000400682 <+149>:	movb   $0x5f,-0x26(%rbp)
   0x0000000000400686 <+153>:	movb   $0x6f,-0x21(%rbp)
   0x000000000040068a <+157>:	movb   $0x5f,-0x2b(%rbp)
   0x000000000040068e <+161>:	movb   $0x34,-0x1d(%rbp)
   0x0000000000400692 <+165>:	movb   $0x46,-0x2c(%rbp)
   0x0000000000400696 <+169>:	movb   $0x5f,-0x1f(%rbp)
   0x000000000040069a <+173>:	movb   $0x44,-0x2f(%rbp)
   0x000000000040069e <+177>:	movb   $0x0,-0x13(%rbp)
   0x00000000004006a2 <+181>:	mov    -0x8(%rbp),%rax
   0x00000000004006a6 <+185>:	movzbl (%rax),%edx
   0x00000000004006a9 <+188>:	mov    -0x10(%rbp),%rax
   0x00000000004006ad <+192>:	movzbl (%rax),%eax
   0x00000000004006b0 <+195>:	cmp    %al,%dl
   0x00000000004006b2 <+197>:	je     0x4006c5 <main+216>
   0x00000000004006b4 <+199>:	mov    $0x4007a4,%edi
   0x00000000004006b9 <+204>:	callq  0x4004b0 <puts@plt>
   0x00000000004006be <+209>:	mov    $0x1,%eax
   0x00000000004006c3 <+214>:	jmp    0x400705 <main+280>
   0x00000000004006c5 <+216>:	mov    -0x8(%rbp),%rax
---Type <return> to continue, or q <return> to quit---
   0x00000000004006c9 <+220>:	movzbl (%rax),%eax
   0x00000000004006cc <+223>:	test   %al,%al
   0x00000000004006ce <+225>:	jne    0x4006f9 <main+268>
   0x00000000004006d0 <+227>:	mov    -0x10(%rbp),%rax
   0x00000000004006d4 <+231>:	movzbl (%rax),%eax
   0x00000000004006d7 <+234>:	test   %al,%al
   0x00000000004006d9 <+236>:	jne    0x4006f9 <main+268>
   0x00000000004006db <+238>:	nop
   0x00000000004006dc <+239>:	lea    -0x50(%rbp),%rax
   0x00000000004006e0 <+243>:	mov    %rax,%rsi
   0x00000000004006e3 <+246>:	mov    $0x4007aa,%edi
   0x00000000004006e8 <+251>:	mov    $0x0,%eax
   0x00000000004006ed <+256>:	callq  0x4004c0 <printf@plt>
   0x00000000004006f2 <+261>:	mov    $0x0,%eax
   0x00000000004006f7 <+266>:	jmp    0x400705 <main+280>
   0x00000000004006f9 <+268>:	addq   $0x1,-0x8(%rbp)
   0x00000000004006fe <+273>:	addq   $0x1,-0x10(%rbp)
   0x0000000000400703 <+278>:	jmp    0x4006a2 <main+181>
   0x0000000000400705 <+280>:	leaveq 
   0x0000000000400706 <+281>:	retq   
End of assembler dump.

OK, wow, that's a lot of stuff, but look at +61 to +177, it's loading a bunch of stuff to memory locations %rbp - 48 to %rbp - 19.
So let's check it out

(gdb) b *0x00000000004006b0
Breakpoint 1 at 0x4006b0

That's just after th blah %rbp crap are loaded completed, then it asks for the password, type in random stuff, then continue to breakpoint.

NOW, inspect the memory location at %rbp - 48

(gdb) x /8x $rbp - 48
0x7fffffffde80:	0x54434441	0x48375f46	0x315f3531	0x6f375f35
0x7fffffffde90:	0x34335f4f	0x465f7935	0x4d5f524f	0x00000033


Now just translate the little endian encoding with python:

>>> "41444354465f374831355f31355f376f4f5f333435795f464f525f4d33".decode("hex")
'ADCTF_7H15_15_7oO_345y_FOR_M3'

And that's a flag
